<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu使用LVM时遇到的问题及基本操作]]></title>
    <url>%2F2019-02-25-ubuntu%E4%BD%BF%E7%94%A8LVM%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[#背景介绍前一段时间在公司实习的时候公司服务器磁盘管理严重不规范，并且一台服务器上又很多块磁盘，大小也不一样，有的磁盘使用率接近100%。有的磁盘使用率却只有不到20%，所以我就决定给磁盘做一下LVM，重新分区，然后再根据使用状况将不同的目录挂载到不同的分区。期间遇到了一些问题，趁着这次整理blog顺便将LVM的命令和遇到的问题整理一下大家一起学习。 #什么是lvmLVM是逻辑盘卷管理（Logical Volume Manager）的简称,它是一种磁盘管理工具，他的重点在于可以弹性的调整filesystem的容量，而且可以将多个实体的磁盘整合到一起，使其变成一个磁盘，还可以在以后继续往LVM管理的磁盘中添加或者删除实体磁盘。LVM中有几个名词需要理解一下： PV（Physical Volume）实体卷轴 VG（Volume Group）卷轴群组 PE（Physical Extent）实体范围区块 LV（Logical Volume）逻辑卷轴#LVM的使用 首先需要安装一下lvm这个软件sudo apt-get install lvm2 安装完之后首先将想要添加到LVM卷的磁盘转换磁盘ID，转换为Linux LVMfdisk /dev/sda 格式化想要添加到LVM中的分区，并挂载到系统当中mkfs.ext4 或者 mkfs.xfs格式化,然后mount挂载 PV阶段4.1 将磁盘创建为PVpvcreate /dev/sda14.2 查看当前系统中已经转化为PV的磁盘pvscan4.3 为显示某一个pv的详细信息pvdisplay /dev/sda14.4 为将该分区移除pv属性pvremove /dev/sda VG阶段5.1 创建VGvgcreate [-s N[mgt]] VG名称 PV名称PS：-s后接的是PE的大小，单位为m，g，t（不区分大小写）5.2 查看系统上所有的VGvgscan5.3 显示某一个VG的详细信息vgdisplay VG名称5.4 在VG中增加额外的PVvgextend VG名称 PV名称5.5 从VG中移除PVvgreduce VG名称 PV名称5.6 删除VGvgremove VG名称 LV阶段6.1 创建LVlvcreate [-L N[mgt]] [-n LV名称 ] VG名称lvcreate [-l N] [-n LV名称 ] VG名称PS:创建LV有两种方式，一种是以容量为单位，即-L，因为LVM中容量的最小单位为PE，所以—L后面的数量必须 是PE的倍数，如果不是，系统会自动计算相近的容量。另一种是以PE的个数为单位，如果这么做，需要计算PE 的 数量，不过可以通过 vgdisplay VG名称 来查看一个VG中总共有多少个PE，已用多少，可用多少。6.2 查询系统上的LVlvscan6.3 显示某一个LV的详细信息lvdisplay LV全名6.4 扩展LV的容量lvextend -L +N[mgt] LV全名6.5 减少LV的容量lvreduce -L -N[mgt] LV全名6.6 改变LV的容量lvresize -L [+/-]N[mgt] LV全名例如：增加20Glvresize -L +20G LV全名或减小20Glvresize -L -20G LV全名或增大或减小到20Glvresize -L 20G LV全名6.7 删除LVlvremove LV全名6.8 注意事项LV的全名为/dev/VG名称/LV名称LV设置完成之后需要格式化并挂载才能使用，挂载之后LV为/dev/mapper/VG名称-LV名称我们linux使用的并不是LV，而是LV设备内的文件系统，目前只有XFS和EXT家族可以放大容量，只有EXT家族可 以缩小容量改变LV容量之后想要生效需要执行resize2fs LV全名 安装完lvm2之后使用lvm的相关命令是发现有错误，这是因为lvm的相关服务并没有开启，执行以下命令即可1234systemctl enable lvm2-lvmetad.servicesystemctl enable lvm2-lvmetad.socketsystemctl start lvm2-lvmetad.servicesystemctl start lvm2-lvmetad.socket]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu重做引导]]></title>
    <url>%2F2019-02-25-ubuntu%E9%87%8D%E5%81%9A%E5%BC%95%E5%AF%BC.html</url>
    <content type="text"><![CDATA[背景介绍相信很多小伙伴都遇到过Ubuntu系统丢失引导的问题。这个问题之所以会出现一般有一下几点： 安装完Ubuntu系统之后又安装Windows系统，导致Windows系统引导覆盖掉了Ubuntu系统的引导。 安装好系统之后不小心动到了安装引导的分区，导致引导丢失。 电脑操作系统出现问题的情况千千万万，数不胜数，就不一一列举。 解决办法 首先你要有一个Ubuntu的系统盘，不过既然你已经安装了Ubuntu系统，系统盘应该是有的。 通过系统盘启动，选择试用系统。 打开终端，可以桌面右键然后选择终端，也可以ctrl+alt+T快捷键打开。 sudo -i切换至root用户。 fdisk -l查看自己系统目前的分区状况。 由图可见Ubuntu分区是有很明确的分区描述的，只需通过分区大小确定你的根目录所在分区，然后在第7步挂载你的根目录所在分区即可。 mkdir /media/ubuntu创建一个文件夹用来挂载Ubuntu系统，可以不必一定创建这个目录。 mount /dev/sda4 /media/ubuntu挂载Ubuntu系统到这个目录下。/dev/sda4即第5步所看到的Ubuntu系统所在的分区。挂载完成之后可以ls /media/ubuntu查看一下，确保挂载的为根目录，而不是/home目录或其他目录。 grub-install --root-directory=/media/ubuntu /dev/sda 修复grub引导。 此时你的Ubuntu系统的引导已经修复完成，重启系统即可直接进入Ubuntu系统。 如果你安装的还有Windows系统的话，这时你在grub界面已经看不到你的Windows系统的引导选项了。 这是因为刚才修复的Ubuntu系统的引导已经将其覆盖掉了。 修复引导很简单，进入系统以后打开终端输入sudo update-grub即可。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>装机</tag>
        <tag>双系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows_server限制2人连接]]></title>
    <url>%2F2019-02-25-windows-server%E9%99%90%E5%88%B62%E4%BA%BA%E8%BF%9E%E6%8E%A5.html</url>
    <content type="text"><![CDATA[背景介绍之所以写这篇博客，是因为之前在公司实习的时候遇到了一个问题，多人使用同一台Windows server服务器，一直连接着的时候还没问题，但是如果某个人断开连接以后就无法再重新连接上了，经过多方排查，发现问题出在Windows server的远程连接机制上。原来微软对Windows server的远程登陆有人数限制，最多只能有两个，如果超过这个数目的人数想使用就必须使用license server进行授权才可以，而且据说授权是收费行为。那么为什么一开始可以多人同时连接呢，原来官方给予了120天的实践来配置license server，如果超过120天仍没有可用的license server，就会出现无法连接的问题。 解决方案这里给出的解决方案是修改注册表 win+R打开运行框，输入regedit 找到 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\RCM\GracePeriod 删除 REG_BINARY 重启服务器 这样你就可以重新获得120天的免费使用。修改注册表是投机取巧的办法，也比较麻烦，所以可以部署license server来直接授权使用。但是部署服务器来进行授权比较麻烦，感兴趣的可以自己百度或者Google一下。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Windows_server</tag>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建ss]]></title>
    <url>%2F2019-02-24-centos7%E6%90%AD%E5%BB%BAss.html</url>
    <content type="text"><![CDATA[服务搭建 连接上租的vps之后首先要更新一下 yum -y update 然后安装比较常用的软件 yum -y install wget vim 进入ssh配置目录修改ssh端口号为不常用的端口号（这里我用的是1996） vim /etc/ssh/sshd_config 安装pip 4.1 先安装依赖 yum -y install epel-release 4.2 安装pip yum -y install pip python-pip 4.3 更新pip版本 pip install --upgrade pip pip安装shadowsocks pip install shadowsocks 修改配置文件 vim /etc/shadowsocks.json 单用户内容为 12345678910&#123; &quot;server&quot;:&quot;服务器的IP地址&quot;, &quot;server_port&quot;:服务监听的端口号, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;监听端口密码&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;rc4-md5&quot;, &quot;fast_open&quot;: false&#125; 多用户内容为 123456789101112&#123; &quot;server&quot;:&quot;服务器IP地址&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password0&quot;, &quot;9004&quot;:&quot;password2&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;rc4-md5&quot;, &quot;fast_open&quot;: false&#125; 配套软件的安装 运行前安装加密 yum -y install m2crypto （可选）安装gevent安装gevent可以提高Shadowsocks的性能。CentOS下安装gevent依赖libevent和greenlet。 2.1 安装libevent yum install -y libevent 2.2 安装greenlet pip install greenlet 2.3 安装gevent pip install gevent 安装破解版锐速 3.1 首先判断系统版本 uname -r 如果输出结果以2开头，例如2.6.32-696.18.7.el6.x86_64，则为centos6 x64系统。 如果输出结果以3开头，例如3.10.0-693.11.6.el7.x86_64，则为centos7 x64系统。 如果输出结果以4开头，例如4.12.10-1.el7.elrepo.x86_64，则说明服务器已经安装Google BBR拥塞控制系统，此时无法继续安装锐速。 3.2 更新系统内核版本 wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh 内核更新完毕以后会自动重启。 3.3 安装锐速 yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install 输入以上命令，回车后系统会自动下载脚本并执行。 所有设置都直接默认回车继续，即可完成安装。 当出现以下信息时说明锐速安装成功并开机自启动。 123[Running Status]ServerSpeeder is running!version 3.11.20.10 shadowsocks服务命令与开机自启动 启动与停止shadowsocks 启动ssserver -c /etc/shadowsocks.json -d start 停止ssserver -c /etc/shadowsocks.json -d stop 配置开机启动 2.1 在/etc/systemd/system/下添加一个shadowsocks服务 vim /etc/systemd/system/shadowsocks.servive 内容见文末 2.3 启动停止服务 systemctl { status | start | stop | restart } shadowsocks 2.4 添加开机启动服务 systemctl enable shadowsocks 添加防火墙对应端口的规则（ssh服务和shadowsocks服务开启的端口都需要添加） firewall-cmd --zone=public --add-port=1996/tcp --permanent 重启ssh服务和防火墙 systemctl rstart sshdfirewall-cmd --reload 附： /etc/systemd/system/shadowsocks文件内容 1234567[Unit]Description=ssserver[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json[Install]WantedBy=multi-user.target]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>shadowsocks</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos6搭建ss]]></title>
    <url>%2F2019-02-24-centos6%E6%90%AD%E5%BB%BAss.html</url>
    <content type="text"><![CDATA[服务搭建 连接上租的vps之后首先要更新一下 yum -y update 然后安装比较常用的软件 yum -y install wget vim 进入ssh配置目录修改ssh端口号为不常用的端口号（这里我用的是1996） vim /etc/ssh/sshd_config 更新python版本（由于默认安装的是python2.6版本，需要先升级为2.7版本） 4.1 先安装依赖 yum -y install gcc openssl-devel bzip2-devel 4.2 下载软件包 cd /opt &amp;&amp; wget https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz 4.3 解压 tar xvzf Python-2.7.15.tgz 4.4 进入目录安装（在检测脚本中加上enable-optimizations优化，主要是在这个版本上能启用PGO优化，让Python在运行时能变得更快。make 加altinstall参数，避免覆盖原来安装在/usr/bin/python 的版本。） cd Python-2.7.15./configure --enable-optimizationsmake &amp;&amp; make altinstall 4.5 查看是否安装成功 /usr/local/bin/python2.7 -V 返回2.7.15则成功，继续进行下一步 4.6 建立软链接，使系统默认python指向2.7版本 mv /usr/bin/python /usr/bin/python2.6.6 (备份原来的2.6版本的python) ln -s /usr/local/bin/python2.7 /usr/bin/python 4.7 解决yum不支持2.7版本的问题 sed -i &#39;s/python/python2.6.6/&#39; /usr/bin/yum 安装pip（因为2.7.15版本已经内建了ensurepip模块，所以直接运行下面的命令去安装pip即可）默认安装的pip为9版本，你需要再升级一下pip版本 python -m ensurepippip install --upgrade pip pip安装shadowsocks pip install shadowsocks 修改配置文件 vim /etc/shadowsocks.json 单用户内容为 12345678910&#123; &quot;server&quot;:&quot;服务器的IP地址&quot;, &quot;server_port&quot;:服务监听的端口号, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;监听端口密码&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;rc4-md5&quot;, &quot;fast_open&quot;: false&#125; 多用户内容为 123456789101112&#123; &quot;server&quot;:&quot;服务器IP地址&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password0&quot;, &quot;9004&quot;:&quot;password2&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;rc4-md5&quot;, &quot;fast_open&quot;: false&#125; 配套软件的安装 运行前安装加密 yum -y install m2crypto （可选）安装gevent安装gevent可以提高Shadowsocks的性能。CentOS下安装gevent依赖libevent和greenlet。 2.1 安装libevent yum install -y libevent 2.2 安装greenlet pip install greenlet 2.3 安装gevent pip install gevent 安装破解版锐速 3.1 首先判断系统版本 uname -r 如果输出结果以2开头，例如2.6.32-696.18.7.el6.x86_64，则为centos6 x64系统。 如果输出结果以3开头，例如3.10.0-693.11.6.el7.x86_64，则为centos7 x64系统。 如果输出结果以4开头，例如4.12.10-1.el7.elrepo.x86_64，则说明服务器已经安装Google BBR拥塞控制系统，此时无法继续安装锐速。 3.2 安装锐速 wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install &#39;2.6.32-642.el6.x86_64&#39; 输入以上命令，回车后系统会自动下载脚本并执行。 所有设置都直接默认回车继续，即可完成安装。 当出现以下信息时说明锐速安装成功并开机自启动。 123[Running Status]ServerSpeeder is running!version 3.11.20.10 shadowsocks服务命令与开机自启动 启动与停止shadowsocks 启动ssserver -c /etc/shadowsocks.json -d start 停止ssserver -c /etc/shadowsocks.json -d stop 配置开机启动 2.1 在/etc/init.d/下添加一个shadowsocks服务 vim /etc/init.d/shadowsocks 内容见文末 2.2 添加执行权限 chmod +x /etc/init.d/shadowsocks 2.3 启动停止服务 services shadowsocks { status | start | stop | restart } 2.4 添加开机启动服务 chkconfig --add shadowsockschkconfig --list shadowsocks 输出shadowsocks 0:off 1:off 2:on 3:on 4:on 5:on 6:off即为成功。 关闭防火墙，并关闭防火墙自启动 service iptables stopchkconfig iptables offchkconfig --list iptables（检查防火墙是否关闭自启动iptables 0:off 1:off 2:off 3:off 4:off 5:off 6:off） 重启ssh服务 service sshd restart 附： /etc/init.d/shadowsocks文件内容 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#!/bin/sh# chkconfig: 2345 90 10# description: Start or stop the Shadowsocks server#### BEGIN INIT INFO# Provides: Shadowsocks# Required-Start: $network $syslog# Required-Stop: $network# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Description: Start or stop the Shadowsocks server### END INIT INFO# Author: xju &lt;qing0991@163.com&gt;name=shadowsocksBIN=/usr/local/bin/ssserverconf=/etc/shadowsocks.jsonstart()&#123; $BIN -c $conf -d start RETVAL=$? if [ &quot;$RETVAL&quot; = &quot;0&quot; ]; then echo &quot;$name start success&quot; else echo &quot;$name start failed&quot; fi&#125;stop()&#123; pid=`ps -ef | grep -v grep | grep -v ps | grep -i &quot;$&#123;BIN&#125;&quot; | awk &apos;&#123;print $2&#125;&apos;` if [ ! -z $pid ]; then $BIN -c $conf -d stop RETVAL=$? if [ &quot;$RETVAL&quot; = &quot;0&quot; ]; then echo &quot;$name stop success&quot; else echo &quot;$name stop failed&quot; fi else echo &quot;$name is not running&quot; RETVAL=1 fi&#125;status()&#123; pid=`ps -ef | grep -v grep | grep -v ps | grep -i &quot;$&#123;BIN&#125;&quot; | awk &apos;&#123;print $2&#125;&apos;` if [ -z $pid ]; then echo &quot;$name is not running&quot; RETVAL=1 else echo &quot;$name is running with PID $pid&quot; RETVAL=0 fi&#125;case &quot;$1&quot; in&apos;start&apos;) start ;;&apos;stop&apos;) stop ;;&apos;status&apos;) status ;;&apos;restart&apos;) stop start RETVAL=$? ;;*) echo &quot;Usage: $0 &#123; start | stop | restart | status &#125;&quot; RETVAL=1 ;;esacexit $RETVAL]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>centos6</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
</search>
